<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Regular Expression Notes</title>
      <link href="/2020/02/06/Reg-Notes/"/>
      <url>/2020/02/06/Reg-Notes/</url>
      
        <content type="html"><![CDATA[<h2 id="Useful-Examples"><a href="#Useful-Examples" class="headerlink" title="Useful Examples"></a>Useful Examples</h2><p>Source from <a href="https://github.com/MorvanZhou/tutorials/blob/master/basic/36_RegEx.py" target="_blank" rel="noopener">Morvan</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># matching string</span></span><br><span class="line">pattern1 = <span class="string">"cat"</span></span><br><span class="line">pattern2 = <span class="string">"bird"</span></span><br><span class="line">string = <span class="string">"dog runs to cat"</span></span><br><span class="line"></span><br><span class="line">print(pattern1 <span class="keyword">in</span> string)    <span class="comment"># True</span></span><br><span class="line">print(pattern2 <span class="keyword">in</span> string)    <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">print(re.search(pattern1, string))  <span class="comment"># &lt;_sre.SRE_Match object; span=(12, 15), match='cat'&gt;</span></span><br><span class="line">print(re.search(pattern2, string))  <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># multiple patterns ("run" or "ran")</span></span><br><span class="line">ptn = <span class="string">r"r[au]n"</span>       <span class="comment"># start with "r" means raw string</span></span><br><span class="line">print(re.search(ptn, <span class="string">"dog runs to cat"</span>))    <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='run'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [A-Z] any uppercase letter </span></span><br><span class="line"><span class="comment"># [0-9a-z] any number or lowercaser letter</span></span><br><span class="line">print(re.search(<span class="string">r"r[A-Z]n"</span>, <span class="string">"dog runs to cat"</span>))     <span class="comment"># None</span></span><br><span class="line">print(re.search(<span class="string">r"r[a-z]n"</span>, <span class="string">"dog runs to cat"</span>))     <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='run'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"r[0-9]n"</span>, <span class="string">"dog r2ns to cat"</span>))     <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='r2n'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"r[0-9a-z]n"</span>, <span class="string">"dog runs to cat"</span>))  <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='run'&gt;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------- Character ----------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \d : decimal digit</span></span><br><span class="line">print(re.search(<span class="string">r"r\dn"</span>, <span class="string">"run r4n"</span>))                <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='r4n'&gt;</span></span><br><span class="line"><span class="comment"># \D : any non-decimal digit</span></span><br><span class="line">print(re.search(<span class="string">r"r\Dn"</span>, <span class="string">"run r4n"</span>))                <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 3), match='run'&gt;</span></span><br><span class="line"><span class="comment"># \s : any white space [\t\n\r\f\v]</span></span><br><span class="line">print(re.search(<span class="string">r"r\sn"</span>, <span class="string">"r\nn r4n"</span>))               <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 3), match='r\nn'&gt;</span></span><br><span class="line"><span class="comment"># \S : opposite to \s, any non-white space</span></span><br><span class="line">print(re.search(<span class="string">r"r\Sn"</span>, <span class="string">"r\nn r4n"</span>))               <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='r4n'&gt;</span></span><br><span class="line"><span class="comment"># \w : [a-zA-Z0-9_]</span></span><br><span class="line">print(re.search(<span class="string">r"r\wn"</span>, <span class="string">"r\nn r4n"</span>))               <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='r4n'&gt;</span></span><br><span class="line"><span class="comment"># \W : opposite to \w</span></span><br><span class="line">print(re.search(<span class="string">r"r\Wn"</span>, <span class="string">"r\nn r4n"</span>))               <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 3), match='r\nn'&gt;</span></span><br><span class="line"><span class="comment"># \b : word boundary - empty string (only at the start or end of the word)</span></span><br><span class="line">print(re.search(<span class="string">r"\bruns\b"</span>, <span class="string">"dog runs to cat"</span>))    <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 8), match='runs'&gt;</span></span><br><span class="line"><span class="comment"># \B : not word boudnary - empty string (but not at the start or end of a word)</span></span><br><span class="line">print(re.search(<span class="string">r"\B runs \B"</span>, <span class="string">"dog   runs  to cat"</span>))  <span class="comment"># &lt;_sre.SRE_Match object; span=(8, 14), match=' runs '&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"\Brun\B"</span>, <span class="string">"dog runners to cat"</span>))  <span class="comment"># None</span></span><br><span class="line"><span class="comment"># \\ : match \</span></span><br><span class="line">print(re.search(<span class="string">r"runs\\"</span>, <span class="string">"runs\ to me"</span>))          <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 5), match='runs\\'&gt;</span></span><br><span class="line"><span class="comment"># . : match anything (except \n)</span></span><br><span class="line">print(re.search(<span class="string">r"r.n"</span>, <span class="string">"r[ns to me"</span>))              <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 3), match='r[n'&gt;</span></span><br><span class="line"><span class="comment"># ^ : match line beginning</span></span><br><span class="line">print(re.search(<span class="string">r"^dog"</span>, <span class="string">"dog runs to cat"</span>))        <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 3), match='dog'&gt;</span></span><br><span class="line"><span class="comment"># $ : match line ending</span></span><br><span class="line">print(re.search(<span class="string">r"cat$"</span>, <span class="string">"dog runs to cat"</span>))        <span class="comment"># &lt;_sre.SRE_Match object; span=(12, 15), match='cat'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># multi-line</span></span><br><span class="line">string = <span class="string">"""</span></span><br><span class="line"><span class="string">dog runs to cat.</span></span><br><span class="line"><span class="string">I run to dog.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(re.search(<span class="string">r"^I"</span>, string))                     <span class="comment"># None</span></span><br><span class="line"><span class="comment"># re.M == re.MULTILINE</span></span><br><span class="line">print(re.search(<span class="string">r"^I"</span>, string, flags=re.M))         <span class="comment"># &lt;_sre.SRE_Match object; span=(18, 19), match='I'&gt;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------- Quantifier ----------------------------------'</span>)</span><br><span class="line"><span class="comment"># * : occur 0 or more times</span></span><br><span class="line">print(re.search(<span class="string">r"ab*"</span>, <span class="string">"a"</span>))                       <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 1), match='a'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"ab*"</span>, <span class="string">"abbbbb"</span>))                  <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 6), match='abbbbb'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># + : occur 1 or more times</span></span><br><span class="line">print(re.search(<span class="string">r"ab+"</span>, <span class="string">"a"</span>))                       <span class="comment"># None</span></span><br><span class="line">print(re.search(<span class="string">r"ab+"</span>, <span class="string">"abbbbb"</span>))                  <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 6), match='abbbbb'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ? : occur 0 or 1 time</span></span><br><span class="line">print(re.search(<span class="string">r"Mon(day)?"</span>, <span class="string">"Monday"</span>))            <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 6), match='Monday'&gt;</span></span><br><span class="line">print(re.search(<span class="string">r"Mon(day)?"</span>, <span class="string">"Mon"</span>))               <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 3), match='Mon'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;n&#125; : occur n times</span></span><br><span class="line"><span class="comment"># &#123;n, m&#125; : occur n to m times</span></span><br><span class="line">print(re.search(<span class="string">r"ab&#123;2,10&#125;"</span>, <span class="string">"a"</span>))                  <span class="comment"># None</span></span><br><span class="line">print(re.search(<span class="string">r"ab&#123;2,10&#125;"</span>, <span class="string">"abbbbb"</span>))             <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 6), match='abbbbb'&gt;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------- Group and Ranges ----------------------------------'</span>)</span><br><span class="line"><span class="comment"># Ranges are inclusive</span></span><br><span class="line">match = re.search(<span class="string">r"(\d+), Date: (.+)"</span>, <span class="string">"ID: 021523, Date: Feb/12/2017"</span>)</span><br><span class="line">print(match.group())                   <span class="comment"># 021523, Date: Feb/12/2017</span></span><br><span class="line">print(match.group(<span class="number">1</span>))                  <span class="comment"># 021523</span></span><br><span class="line">print(match.group(<span class="number">2</span>))                  <span class="comment"># Date: Feb/12/2017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ?P&lt;name&gt; Add group name</span></span><br><span class="line">match = re.search(<span class="string">r"(?P&lt;id&gt;\d+), Date: (?P&lt;date&gt;.+)"</span>, <span class="string">"ID: 021523, Date: Feb/12/2017"</span>)</span><br><span class="line">print(match.group(<span class="string">'id'</span>))                <span class="comment"># 021523</span></span><br><span class="line">print(match.group(<span class="string">'date'</span>))              <span class="comment"># Date: Feb/12/2017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># findall: return a list</span></span><br><span class="line">print(re.findall(<span class="string">r"r[ua]n"</span>, <span class="string">"run ran ren"</span>))    <span class="comment"># ['run', 'ran']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | : or</span></span><br><span class="line">print(re.findall(<span class="string">r"(run|ran)"</span>, <span class="string">"run ran ren"</span>)) <span class="comment"># ['run', 'ran']</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------- Replace, Split and Compile ----------------------------------'</span>)</span><br><span class="line"><span class="comment"># re.sub() replace</span></span><br><span class="line">print(re.sub(<span class="string">r"r[au]ns"</span>, <span class="string">"catches"</span>, <span class="string">"dog runs and rans and rans to cat"</span>))     <span class="comment"># dog catches and catches and catches to cat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># re.split()</span></span><br><span class="line">print(re.split(<span class="string">r"[,;\.]"</span>, <span class="string">"a;b,c.d;e"</span>))             <span class="comment"># ['a', 'b', 'c', 'd', 'e']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># compile</span></span><br><span class="line">compiled_re = re.compile(<span class="string">r"r[ua]n"</span>)</span><br><span class="line">print(compiled_re.search(<span class="string">"dog ran to cat"</span>))     <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='ran'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Cheat-sheet"><a href="#Cheat-sheet" class="headerlink" title="Cheat sheet"></a>Cheat sheet</h2><p>Source from <a href="https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/" target="_blank" rel="noopener">Cheatography</a>.</p><img src="https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/" width="90%" height="90%" title="Regular Expressions Cheat sheet." alt="Regular Expressions Cheat sheet."/>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Notes</title>
      <link href="/2020/02/03/Markdown-Notes/"/>
      <url>/2020/02/03/Markdown-Notes/</url>
      
        <content type="html"><![CDATA[<h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># H1 </span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br><span class="line"></span><br><span class="line">H1 &amp; H2 have an underline-ish style</span><br></pre></td></tr></table></figure><h2 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**bold text**</span></span><br><span class="line"><span class="emphasis">*italicized text*</span></span><br><span class="line"><span class="strong">***bold italicized text**</span>*</span><br><span class="line">~~delete text~~</span><br></pre></td></tr></table></figure><h2 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; blockquote</span><br><span class="line">&gt;&gt; blockquote</span><br><span class="line">&gt;&gt;&gt; blockquote</span><br></pre></td></tr></table></figure><blockquote><p>blockquote</p><blockquote><p>blockquote</p><blockquote><p>blockquote</p></blockquote></blockquote></blockquote><h2 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">-------</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><h2 id="Pictures"><a href="#Pictures" class="headerlink" title="Pictures"></a>Pictures</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt text](url)</span><br><span class="line"></span><br><span class="line">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;94oJfD_bAAcT8t7mm9GUKT-xh_&#x2F;timg?image&amp;quality&#x3D;100&amp;size&#x3D;b4000_4000&amp;sec&#x3D;1580715854&amp;di&#x3D;a290b8a91a74fe895c75dc694bfab8cb&amp;src&#x3D;http:&#x2F;&#x2F;ww2.sinaimg.cn&#x2F;large&#x2F;006fER6rjw1f6zeazbg32j30cs0i53zs.jpg &quot;233&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1580715854&di=a290b8a91a74fe895c75dc694bfab8cb&src=http://ww2.sinaimg.cn/large/006fER6rjw1f6zeazbg32j30cs0i53zs.jpg" alt="blockchain" title="233"></p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[title](https:&#x2F;&#x2F;www.example.com)</span><br><span class="line"></span><br><span class="line">[Duck Duck Go](https:&#x2F;&#x2F;duckduckgo.com)</span><br></pre></td></tr></table></figure><p><a href="https://duckduckgo.com" target="_blank" rel="noopener">Duck Duck Go</a></p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&#x2F;+&#x2F;* unordered list</span><br><span class="line"></span><br><span class="line">Tab  retract</span><br></pre></td></tr></table></figure><ul><li>Content<ul><li>Content </li><li>Content</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. ordered list</span><br><span class="line">2. ordered list</span><br><span class="line">3. ordered list</span><br><span class="line"></span><br><span class="line">Tab  retract</span><br></pre></td></tr></table></figure><ol><li>Content</li><li>Content<ol><li>Content</li></ol></li></ol><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ---------   | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br><span class="line"></span><br><span class="line">Alignment</span><br><span class="line">:--- to left</span><br><span class="line">:---: center</span><br><span class="line">---: to right</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one line &#39;code&#39;</span><br><span class="line">multiple lines &#39;&#39;&#39; code &#39;&#39;&#39;</span><br></pre></td></tr></table></figure><p>At the command prompt, type <code>None</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WhiteFlag</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'we are winnable!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/03/hello-world/"/>
      <url>/2020/02/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
